@page "/quiz"
@page "/quiz/{title}/{premade:bool}"
@using Microsoft.JSInterop
@inject IJSRuntime IJSRuntime
@using System
@using System.Web
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@using System.Text.RegularExpressions
@using NJson = Newtonsoft.Json
@inject IFirebaseAuthService FirebaseAuthService
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Note Learning Session</PageTitle>

<style>
	.quiz-element {
		min-height: 55vh;
		align-content: center;
	}

	.synonyms-50 {
		min-width: 48%;
	}

	.translation-50 {
		margin-left: auto;
		min-width: 48%;
	}

	.height-fix {
		height: 4.6em;
	}

	.quiz-input {
		width: 100%;
		padding: 0.5em;
		border: none;
		border-radius: 0.3em;
	}

	.review-input {
		width: 60%;
		padding: 0.5em;
		border: none;
		border-radius: 0.3em;
	}

	.btn-block {
		width: 100%;
	}

	.form-group {
		display: flex;
		flex: 0 0 auto;
		flex-flow: row wrap;
		align-items: center;
		margin-bottom: 1em;
	}
</style>

<div class="container">
	<div class="card bg-dark text-light shadow">
		<div class="card-header">
			<h3>@Title</h3>
		</div>

		<div class="quiz-element card-body text-center bg-dark text-light">
			<div class="container mt-5">
				@if (!QuizComplete)
				{
					@if (CurrentHeading == string.Empty)
					{
						<div class="spinner-border" role="status">
							<span class="sr-only"></span>
						</div>
					}
					else
					{
						<div>
							<h3>@HttpUtility.HtmlDecode(CurrentHeading)</h3>
							@*<button class="btn btn-dark" @onclick="PlayAudioHint">Hear solution<i class="fa fa-volume-up" aria-hidden="true"></i></button>*@
						</div>
					}


					<div>
						<form @onsubmit="AdvanceQuiz">
							<input type="text" class="quiz-input shadow-lg mt-5" @bind="@Response" />
						</form>
						<small class="text-warning">@ResponseErrorText</small>
						<div class="">
							<div class="text-center">
								@if (PromptComplete)
								{
									@if (!CorrectDisplay)
									{
										@*<h3>@Feedback</h3>*@
						// Expected Answer
										<h3 class="mt-5">Your repsonse: <span class="text-success">@UserAttemptGreen</span><span class="text-danger">@UserAttemptRed</span><span class="text-warning">@UserAttemptYellow</span></h3>
									}
									else
									{
										@* Ensure new line *@
										<p class="height-fix"></p>
									}
								}
								else
								{
									@* Ensure new line *@
									<p class="height-fix"></p>
								}
							</div>
						</div>
						<button class="@ResponsiveButton" @onclick="AdvanceQuiz">
							@BtnText
						</button>

					</div>
				}
				else
				{
					@if (!StartReview)
					{
						@if (PerfectResult)
						{
							<div class="text-center">
								<p>Perfect Result!</p>
								<button class="btn btn-success" @onclick="NavigateToHome">Return to home</button>
							</div>
							@if (Premade)
							{
								@if (FirebaseAuthService.FirebaseAuthClient.User != null)
								{
									<p class="mt-5">Save these notes and track progress?</p>
									<div>
										<label>Title of new notes</label>
										<div>
											<input type="text" class="review-input shadow-lg my-2" @bind="NewTitle" />
										</div>
										<br />
									</div>
									<div class="mt-1">
										<button class="btn btn-success" @onclick="SaveNotes">Save notes</button>
									</div>
								}
								else
								{
									<p>Log in modify notes and save progress</p>
								}
							}
						}
						else
						{
							<div class="text-center">
								<p>Would you like to review the incorrect prompts?</p>
								<button class="btn btn-primary" @onclick="EnableStartReview">Review Notes</button>
								<button class="btn btn-light" @onclick="NavigateToHome">Return to home</button>
							</div>
						}
					}
					else
					{
						@if (!ReviewComplete)
						{
							<div>
								<h4 class="text-secondary">@returnedPrompts.Prompts[errorIndexes[ReviewIndex]][0].ToString()</h4>
								<h2 class="mb-3">@returnedPrompts.Prompts[errorIndexes[ReviewIndex]][1].ToString()</h2>

								<p class="text-danger">@WarnAPIUsage</p>

								<div class="mt-3 mb-5">
									<div class="d-flex flex-row mt-3">
										<div class="synonyms-50">

											<h3>Synonyms</h3>
											<form>
												<label for="synonymInput">Want to change a word? Find a synonym!</label>
												<br />
												<input id="synonymInput" type="text" class="review-input shadow-lg my-2" @bind="@Response" />
											</form>
											<div class="my-2">
												<label class="mt-1 text-info" for="fromLocales">Text language:</label>
												<select class="mt-1" id="fromLocales" @bind="FromLocal">
													<option value="@Locales.en">English</option>
													<option value="@Locales.es">Spanish</option>
													<!-- TODO: Add the following languages to the cloud function -->
													@*<option value="@Locales.ie">Irish</option>*@
													@*<option value="@Locales.de">German</option>*@
													@*<option value="@Locales.fr">French</option>*@
												</select>

												<button class="btn btn-light mt-1 ms-3" @onclick="genSynonyms">Find Synonyms</button>
												@if (finalSynonyms.Count() > 0)
												{
													<div class="card bg-light text-dark my-3">
														<div class="card-body">
															@foreach (var word in finalSynonyms)
															{
																<h4 class="text-center">@word</h4>
															}
														</div>
													</div>
												}
											</div>
										</div>

										<div class="translation-50">
											<h3>Translation</h3>

											<form>
												<label for="translationInput">Translation provided by Google translate</label>
												<br />
												<input id="translationInput" type="text" class="review-input shadow-lg my-2" @bind="@TranslationText" />
												<br />
												<small class="text-info">We recommend checking translations with a fluent speaker</small>
											</form>

											<div class="my-2">
												<label class="mt-1" for="fromLocales">From:</label>
												<select class="mt-1" id="fromLocales" @bind="FromLocal">
													<option value="@Locales.en">English</option>
													<option value="@Locales.es">Spanish</option>
													<option value="@Locales.ie">Irish</option>
													<option value="@Locales.de">German</option>
													<option value="@Locales.fr">French</option>
												</select>

												<label for="toLocales">To:</label>
												<select id="toLocales" @bind="ToLocal">
													<option value="@Locales.es">Spanish</option>
													<option value="@Locales.en">English</option>
													<option value="@Locales.ie">Irish</option>
													<option value="@Locales.de">German</option>
													<option value="@Locales.fr">French</option>
												</select>

												<button class="btn btn-light mt-1 ms-3" @onclick="callTranslate">Translate</button>

												@if (finalTranslations.Count() > 0)
												{
													<div class="card bg-light text-dark my-3">
														<div class="card-body">
															@foreach (var word in finalTranslations)
															{
																<h4 class="text-center">@word</h4>
															}
														</div>
													</div>
												}
											</div>
										</div>
									</div>
									@if (FirebaseAuthService.FirebaseAuthClient.User != null)
									{
										<div class="mt-3">
											<label><small>If you wish to save a new answer, please enter it here</small></label>
											<br />
											<input type="text" class="review-input shadow-lg my-2" @bind="NewNotes[errorIndexes[ReviewIndex]][1]" />
											<br />
											<small class="text-danger">@ReviewTextError</small>
										</div>
									}
									else
									{
										<small class="mt-3">Log in modify notes and save progress</small>
									}
								</div>
								<button class="btn btn-primary" @onclick="e => {
									if (NewNotes[errorIndexes[ReviewIndex]][1].Trim() != String.Empty)
									{
										ReviewTextError = String.Empty;
										if (ReviewIndex < errorIndexes.Count() - 1)
										{
											ReviewIndex++;
										}
										else
										{
											ReviewComplete = true;
										}
									}
									else
									{
										SetErrorText();
									}
									}">
									Review Next
								</button>
							</div>
						}
						else
						{
							<div class="text-center">
								<p>Review Complete!</p>
								<button class="btn btn-primary mb-3" @onclick="NavigateToHome">Return to home</button>

								@if (FirebaseAuthService.FirebaseAuthClient.User != null)
								{
									<p class="mt-5">Save these notes and track progress?</p>
									<div>
										<label>Title of new notes</label>
										<div>
											<input type="text" class="review-input shadow-lg my-2" @bind="NewTitle" />
										</div>
										<br />
										<small class="text-warning">@NewTitleErrorText</small>
									</div>
									<div class="mt-1">
										<button class="btn btn-success" @onclick="SaveNotes">Save notes</button>
									</div>
								}
								else
								{
									<p>Log in modify notes and save progress</p>
								}
							</div>
							
						}
					}
				}
			</div>
		</div>
	</div>
</div>

@code
{
	String baseURI = "https://user-web-api-tn.azurewebsites.net";

	[Parameter]
	public string Title { get; set; } = string.Empty;

	[Parameter]
	public bool Premade { get; set; }

	private DocPrompts returnedPrompts = new DocPrompts();
	private List<int> errorIndexes = new List<int>();

	// Quiz Logic
	String ResponsiveButton = "btn btn-light btn-lg btn-block mt-5";
	bool PromptComplete { get; set; } = false;
	bool CorrectDisplay { get; set; } = false;
	string Response { get; set; } = string.Empty;
	string TranslationText { get; set; } = string.Empty;
	Outcome RoundResult { get; set; } = new Outcome();
	string Ans { get; set; } = string.Empty;
	string UserAttemptRed { get; set; } = string.Empty;
	string UserAttemptYellow { get; set; } = string.Empty;
	string UserAttemptGreen { get; set; } = string.Empty;
	bool QuizComplete { get; set; } = false;
	string BtnText { get; set; } = "Check Answer";
	bool PerfectResult { get; set; } = true;
	String ResponseErrorText { get; set; } = String.Empty;
	String NewTitleErrorText { get; set; } = String.Empty;

	// Review Logic
	String ReviewTextError { get; set; } = String.Empty;
	bool ReviewComplete { get; set; } = false;
	bool StartReview { get; set; } = false;
	string WarnAPIUsage { get; set; } = string.Empty;

	private static readonly HttpClient client = new HttpClient();


	string CurrentHeading { get; set; } = "";
	int QuizIndex { get; set; } = 0;
	int ReviewIndex { get; set; } = 0;

	public void EnableStartReview()
	{
		StartReview = true;
	}

	public void SetErrorText()
	{
		ReviewTextError = "Text entry required";
	}

	// Additional APIs

	public enum Locales
	{
		en,
		es,
		de,
		fr,
		ie
	}

	// After review vars
	String NewTitle { get; set; } = String.Empty;
	List<List<String>> NewNotes = new List<List<String>>();

	List<string> finalSynonyms = new List<string>();
	List<string> finalTranslations = new List<string>();

	Locales FromLocal { get; set; } = Locales.en;
	Locales ToLocal { get; set; } = Locales.es;

	async Task genSynonyms()
	{
		try
		{
			finalSynonyms = await callSynonyms(Response);
		}
		catch (HttpRequestException e)
		{
			Console.WriteLine(e.Message);
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	public async Task PlayAudioHint()
	{
		string lang = "en";
		string src = returnedPrompts.Prompts[QuizIndex][1].ToString();
		if (ToLocal == Locales.es)
		{
			lang = "es-es";
		}

		var client = new HttpClient();
		var request = new HttpRequestMessage
			{
				Method = HttpMethod.Get,
				RequestUri = new Uri($"https://voicerss-text-to-speech.p.rapidapi.com/?hl={lang}&src=Quiero%20mi%20dinero&key=046c4303fdd44b69b2126b0035ed8bc1&f=8khz_8bit_mono&c=mp3&r=0"),
				Headers =
			{
				{ "X-RapidAPI-Key", "3dd5c1afa7msha944fd8168e4e91p1e3b4ajsn41765a294a16" },
				{ "X-RapidAPI-Host", "voicerss-text-to-speech.p.rapidapi.com" },
			},
			};
		using (var response = await client.SendAsync(request))
		{
			response.EnsureSuccessStatusCode();
			var body = await response.Content.ReadAsStringAsync();
			Console.WriteLine(body);
		}
	}

	async Task<List<string>> callSynonyms(string wordIn)
	{
		var returnSynonyms = new List<string>();
		if (wordIn != String.Empty)
		{
			var client = new HttpClient();
			string lang = "eng";
			if (FromLocal == Locales.es)
			{
				lang = "spa";
			}
			else if (FromLocal == Locales.de)
			{
				lang = "deu";
			}
			// TODO: Add more languages here

			string URIWordnetFuntion = $"https://europe-west1-tomanota-374115.cloudfunctions.net/synonymsWordnet?word={wordIn}&language={lang}";
			var response = await client.GetStringAsync(URIWordnetFuntion);

			var tempObject = JsonSerializer.Deserialize<JsonElement>(response);

			var synonyms = tempObject.GetProperty("synonyms").EnumerateArray();

			foreach (var synonym in synonyms)
			{
				if (returnSynonyms.Count >= 6)
				{
					break;
				}

				var word = synonym.ToString();
				if (!returnSynonyms.Contains(word) && word.ToLower() != wordIn.ToLower())
				{
					returnSynonyms.Add(word);
				}
			}
		}
		return returnSynonyms;
	}

	async Task callTranslate()
	{
		try
		{
			finalTranslations = await Translate(TranslationText, FromLocal, ToLocal);
		}
		catch (HttpRequestException e)
		{
			Console.WriteLine(e.Message);
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	async Task<List<string>> Translate(string textIn, Locales localFrom, Locales localTo)
	{
		List<string> responseTranslations = new List<string>();
		Console.WriteLine("From: " + localFrom.ToString());
		Console.WriteLine("To: " + localTo.ToString());
		var client = new HttpClient();
		var request = new HttpRequestMessage
			{
				Method = HttpMethod.Post,
				RequestUri = new Uri("https://google-translate1.p.rapidapi.com/language/translate/v2"),
				Headers =
			{
				{ "X-RapidAPI-Key", "3dd5c1afa7msha944fd8168e4e91p1e3b4ajsn41765a294a16" },
				{ "X-RapidAPI-Host", "google-translate1.p.rapidapi.com" },
			},
				Content = new FormUrlEncodedContent(new Dictionary<string, string>
			{
				{ "source", localFrom.ToString() },
				{ "target", localTo.ToString() },
				{ "q", textIn },
			}),
			};

		using (var response = await client.SendAsync(request))
		{
			response.EnsureSuccessStatusCode();
			var body = await response.Content.ReadAsStringAsync();
			var tempObject = NJson.JsonConvert.DeserializeObject<dynamic>(body);

			foreach (var translation in tempObject.data.translations)
			{
				responseTranslations.Add(translation.translatedText.ToString());
			}

			return responseTranslations;
		}
	}

	//void testCallSyn()
	//{
	//	callSynonyms("Notes");
	//}

	public class Outcome
	{
		public bool AreEqual { get; set; }
		public int Index { get; set; }
		public string CorrectAnswer { get; set; }
		public string UserAttempt { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		if (Premade)
		{
			try
			{
				var jsonString = await Http.GetStringAsync("https://europe-west1-tomanota-374115.cloudfunctions.net/get-prompts?q=" + Title.ToString());
				returnedPrompts.Prompts = JsonSerializer.Deserialize<List<List<String>>>(jsonString);
				returnedPrompts.numOfPrompts = returnedPrompts.Prompts.Count();
				CurrentHeading = returnedPrompts.Prompts[0][0].ToString();
			}
			catch
			{
				Console.WriteLine("Service unavailable");
			}
		}
		else
		{
			try
			{
				if (FirebaseAuthService.FirebaseAuthClient.User != null)
				{
					string key = "X00162027";
					string user = FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString();
					var jsonString = await Http.GetStringAsync($"{baseURI}/userNotes/key/{key}/user/{user}/title/{Title.ToString()}");
					returnedPrompts.CurrentScore = Int32.Parse(await Http.GetStringAsync($"{baseURI}/userNotes/score/key/{key}/user/{user}/title/{Title.ToString()}"));
					returnedPrompts.Prompts = JsonSerializer.Deserialize<List<List<String>>>(jsonString);
					returnedPrompts.numOfPrompts = returnedPrompts.Prompts.Count();
					//Console.WriteLine(returnedPrompts.Prompts[0][1].ToString());
					CurrentHeading = returnedPrompts.Prompts[0][0].ToString();

				}
				else
				{
					NavigateToHome();
				}
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
		}
	}

	public class DocPrompts
	{
		public List<List<String>>? Prompts { get; set; } = new List<List<String>>();
		public int CurrentScore { get; set; }
		public int numOfPrompts { get; set; }

	}

	public async Task GetResponseAsync()
	{
		if (Response != "")
		{
			RoundResult = await Http.GetFromJsonAsync<Outcome>($"https://europe-west1-tomanota-374115.cloudfunctions.net/check-prompts?q={Response.ToString()}&a={Ans}");
		}
		else
		{
			RoundResult = new Outcome() { AreEqual = false, CorrectAnswer = returnedPrompts.Prompts[QuizIndex][1].ToString(), Index = -1, UserAttempt = "" };
		}
	}

	public void DisplayAns()
	{
		if (RoundResult.AreEqual)
		{
			BtnText = "Correct";
			ResponsiveButton = "btn btn-success btn-lg btn-block mt-5";
			CorrectDisplay = true;
		}
		else
		{
			if (returnedPrompts.Prompts[QuizIndex].Count() >= 3)
			{
				@* Console.WriteLine(returnedPrompts.Prompts[QuizIndex][2].ToString()); *@
				if (Regex.IsMatch(HttpUtility.HtmlEncode(Response), returnedPrompts.Prompts[QuizIndex][2].ToString(), RegexOptions.IgnoreCase))
				{
					// Console.WriteLine("Partial");
					UserAttemptYellow = RoundResult.UserAttempt.ToString();
					ResponsiveButton = "btn btn-warning btn-lg btn-block mt-5";
				}
				else
				{
					PerfectResult = false;
					errorIndexes.Add(QuizIndex);
					if (RoundResult.Index == 0)
					{
						UserAttemptRed = RoundResult.UserAttempt.ToString();
					}
					else
					{
						for (int i = 0; i < RoundResult.UserAttempt.Count(); i++)
						{
							if (i < RoundResult.Index)
							{
								UserAttemptGreen += RoundResult.UserAttempt[i].ToString();
							}
							else
							{
								UserAttemptRed += RoundResult.UserAttempt[i].ToString();
							}
						}
					}
					ResponsiveButton = "btn btn-danger btn-lg btn-block mt-5";
				}
				BtnText = "Continue";
				CurrentHeading = $"{returnedPrompts.Prompts[QuizIndex][0].ToString()} 🠮 {RoundResult.CorrectAnswer}";
			}
			else
			{
				BtnText = "Continue";
				PerfectResult = false;
				errorIndexes.Add(QuizIndex);
				CurrentHeading = $"{returnedPrompts.Prompts[QuizIndex][0].ToString()} 🠮 {RoundResult.CorrectAnswer}";
				// Feedback = $"Expected answer: {RoundResult.CorrectAnswer}";
				if (RoundResult.Index == 0)
				{
					UserAttemptRed = RoundResult.UserAttempt.ToString();
				}
				else
				{
					for (int i = 0; i < RoundResult.UserAttempt.Count(); i++)
					{
						if (i < RoundResult.Index)
						{
							UserAttemptGreen += RoundResult.UserAttempt[i].ToString();
						}
						else
						{
							UserAttemptRed += RoundResult.UserAttempt[i].ToString();
						}
					}
				}
				ResponsiveButton = "btn btn-danger btn-lg btn-block mt-5";
			}
		}
		PromptComplete = true;
	}

	public async Task AdvanceQuiz()
	{
		@* To check answer *@
		if (!PromptComplete)
		{
			// Checking Ans
			Response = Response.Trim();
			if (Response == string.Empty)
			{
				// Console.WriteLine("No Attempt!");
				ResponseErrorText = "No attempt entered, make sure to try a good guess!";
			}
			else
			{
				ResponseErrorText = String.Empty;
				//if (!String.IsNullOrEmpty(returnedPrompts.Prompts[quizIndex][1].ToString())) {
				Ans = HttpUtility.HtmlDecode(returnedPrompts.Prompts[QuizIndex][1].ToString());
				await GetResponseAsync();

				DisplayAns();
				await InvokeAsync(StateHasChanged);
			}

		}
		else
		{
			BtnText = "Check Answer";
			PromptComplete = false;
			CorrectDisplay = false;
			Response = "";
			UserAttemptGreen = "";
			UserAttemptRed = "";
			UserAttemptYellow = "";
			ResponsiveButton = "btn btn-light btn-lg btn-block mt-5";

			if (QuizIndex < returnedPrompts.numOfPrompts - 1)
			{
				QuizIndex++;
				CurrentHeading = returnedPrompts.Prompts[QuizIndex][0].ToString();
			}
			else
			{
				QuizComplete = true;
				NewNotes = returnedPrompts.Prompts;
				if (!Premade)
				{
					string key = "X00162027";
					string user = FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString();
					bool started = await Http.GetFromJsonAsync<bool>($"{baseURI}/userNotes/started/key/{key}/user/{user}/title/{Title}");
					if (started)
					{
						TimeSpan lastModified = await Http.GetFromJsonAsync<TimeSpan>($"{baseURI}/userNotes/timeDelta/key/{key}/user/{user}/title/{Title}");
						if (lastModified > TimeSpan.FromHours(4))
						{
							await Http.PutAsync($"{baseURI}/userNotes/setTime/key/{key}/userIn/{user}/titleIn/{Title}", null);
							if (errorIndexes.Count() < (returnedPrompts.numOfPrompts - (returnedPrompts.numOfPrompts / 3)))
							{
								if (PerfectResult && returnedPrompts.CurrentScore <= 8)
								{
									string uri = $"{baseURI}/userNotes/incScore/key/{key}/userIn/{user}/titleIn/{Title}";
									await Http.PutAsync(uri, null);
									await Http.PutAsync(uri, null);
								}
								else if (returnedPrompts.CurrentScore < 10)
								{
									string uri = $"{baseURI}/userNotes/incScore/key/{key}/userIn/{user}/titleIn/{Title}";
									await Http.PutAsync(uri, null);
								}
							}
							else
							{
								if (returnedPrompts.CurrentScore > 0)
								{
									string uri = $"{baseURI}/userNotes/decScore/key/{key}/userIn/{user}/titleIn/{Title}";
									await Http.PutAsync(uri, null);
								}
							}
						}
						else
						{
							// Console.WriteLine("Too soon to increment score");
						}
					}
					else
					{
						await Http.PutAsync($"{baseURI}/userNotes/setTime/key/{key}/userIn/{user}/titleIn/{Title}", null);
						if (errorIndexes.Count() < (returnedPrompts.numOfPrompts - (returnedPrompts.numOfPrompts / 3)))
						{
							if (PerfectResult && returnedPrompts.CurrentScore <= 8)
							{
								string uri = $"{baseURI}/userNotes/incScore/key/{key}/userIn/{user}/titleIn/{Title}";
								await Http.PutAsync(uri, null);
								await Http.PutAsync(uri, null);
							}
							else if (returnedPrompts.CurrentScore < 10)
							{
								string uri = $"{baseURI}/userNotes/incScore/key/{key}/userIn/{user}/titleIn/{Title}";
								await Http.PutAsync(uri, null);
							}
						}
						else
						{
							if (returnedPrompts.CurrentScore > 0)
							{
								string uri = $"{baseURI}/userNotes/decScore/key/{key}/userIn/{user}/titleIn/{Title}";
								await Http.PutAsync(uri, null);
							}
						}
					}
				}
			}
		}
	}

	private void NavigateToHome()
	{
		NavigationManager.NavigateTo("/");
	}

	public class TitleGroup
	{
		[JsonPropertyName("title")]
		public String Title { get; set; }
		[JsonPropertyName("score")]
		public int Score { get; set; }
		[JsonPropertyName("lastProgressed")]
		public TimeSpan? LastProgressed { get; set; }
	}

	private async Task SaveNotes()
	{
		string key = "X00162027";
		string user = HttpUtility.HtmlEncode(FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString());
		if (FirebaseAuthService.FirebaseAuthClient.User.Info.Email != null)
		{
			NewTitle = NewTitle.Trim();
			if (NewTitle != String.Empty)
			{
				NewTitleErrorText = String.Empty;
				List<TitleGroup> existingTitleGroups = new List<TitleGroup>();
				List<String> existingTitles = new List<String>();
				string url_user_titles = $"{baseURI}/userNotes/key/{key}/user/{user}";
				try
				{
					var Response = await Http.GetAsync(url_user_titles);

					var JSONResponse = await Response.Content.ReadAsStringAsync();
					// Console.WriteLine(JSONResponse.ToString());
					existingTitleGroups = JsonSerializer.Deserialize<List<TitleGroup>>(JSONResponse);

					foreach (var titleGroup in existingTitleGroups)
					{
						existingTitles.Add(HttpUtility.HtmlDecode(titleGroup.Title));
					}
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}

				bool notExisting = true;
				bool valid = true;
				if (existingTitles.Contains(NewTitle))
				{
					notExisting = false;
				}

				var content = "[";
				for (int i = 0; i < NewNotes.Count() - 1; i++)
				{
					if (NewNotes.ElementAt(i).ElementAt(0).ToString().Trim() == String.Empty || NewNotes.ElementAt(i).ElementAt(1).ToString().Trim() == String.Empty)
					{
						valid = false;
						break;
					}
					content += $"[\"{HttpUtility.HtmlEncode(NewNotes.ElementAt(i).ElementAt(0)).Trim()}\", \"{HttpUtility.HtmlEncode(NewNotes.ElementAt(i).ElementAt(1)).Trim()}\"],";
				}
				if (NewNotes.ElementAt(NewNotes.Count() - 1).ElementAt(0).ToString().Trim() == String.Empty || NewNotes.ElementAt(NewNotes.Count() - 1).ElementAt(1).ToString().Trim() == String.Empty)
				{
					notExisting = false;
				}
				content += $"[\"{HttpUtility.HtmlEncode(NewNotes.ElementAt(NewNotes.Count() - 1).ElementAt(0)).Trim()}\", \"{HttpUtility.HtmlEncode(NewNotes.ElementAt(NewNotes.Count() - 1).ElementAt(1)).Trim()}\"]]";

				if (valid)
				{
					// Console.WriteLine("Is valid");
					if (notExisting)
					{
						// Console.WriteLine("Making new");
						var Content = new StringContent(content, Encoding.UTF8, "application/json");

						var uri = $"{baseURI}/userNotes/newNote/key/{key}/userIn/{user}/titleIn/{HttpUtility.HtmlEncode(NewTitle)}/scoreIn/1";

						try
						{
							// Console.WriteLine("Looks good");
							// Console.WriteLine(content);
							await client.PostAsync(uri, Content);
							NavigationManager.NavigateTo("/");
						}
						catch (Exception e)
						{
							Console.WriteLine(e.Message);
						}
					}
					else
					{
						// Console.WriteLine("Replacing title");
						bool result = await IJSRuntime.InvokeAsync<bool>("confirm", "Title already in use. Overwrite notes? This action cannot be undone.");
						if (result)
						{
							try
							{
								string url = $"{baseURI}/userNotes/delete/key/{key}/user/{user}/title/{HttpUtility.HtmlEncode(NewTitle)}";
								await Http.DeleteAsync(url);
								var Content = new StringContent(content, Encoding.UTF8, "application/json");

								var uri = $"{baseURI}/userNotes/newNote/key/{key}/userIn/{user}/titleIn/{HttpUtility.HtmlEncode(NewTitle)}/scoreIn/1";

								// Console.WriteLine("Looks good");
								// Console.WriteLine(content);
								await client.PostAsync(uri, Content);
								NavigationManager.NavigateTo("/");
							}
							catch (Exception e)
							{
								Console.WriteLine(e.Message);
							}
						}
					}
				}
			}
			else
			{
				NewTitleErrorText = "New title cannot be empty";
			}
		}
	}
}