@page "/quiz"
@page "/quiz/{title}"
@using System.Text.Json
@using NJson = Newtonsoft.Json
@inject HttpClient Http
@inject NavigationManager NavigationManager

<PageTitle>Note Learning Session</PageTitle>

<style>
	.quiz-element {
		min-height: 55vh;
		align-content: center;
	}

	.synonyms-50 {
		min-width: 48%;
	}

	.translation-50 {
		margin-left: auto;
		min-width: 48%;
	}

	.height-fix {
		height: 4.6em;
	}

	.quiz-input {
		width: 100%;
		padding: 0.5em;
		border: none;
		border-radius: 0.3em;
	}

	.review-input {
		width: 60%;
		padding: 0.5em;
		border: none;
		border-radius: 0.3em;
	}

	.btn-block {
		width: 100%;
	}
</style>

<div class="container">
	<div class="card bg-dark text-light shadow">
		<div class="card-header">
			<h3>@Title</h3>
		</div>

		<div class="quiz-element card-body text-center bg-dark text-light">
			<div class="container mt-5">
				@if (!QuizComplete)
				{
					@if (CurrentHeading == string.Empty)
					{
						<div class="spinner-border" role="status">
							<span class="sr-only"></span>
						</div>
					}
					else
					{
						<h3>@CurrentHeading</h3>
					}


					<div>
						<form @onsubmit="AdvanceQuiz">
							<input type="text" class="quiz-input shadow-lg mt-5" @bind="@Response" />
						</form>
						<div class="">
							<div class="text-center">
								@if (PromptComplete)
								{
									@if (!CorrectDisplay)
									{
										@*<h3>@Feedback</h3>*@
						// Expected Answer
										<h3 class="mt-5">Your repsonse: <span class="text-success">@UserAttemptGreen</span><span class="text-danger">@UserAttemptRed</span></h3>
									}
									else
									{
										@* Ensure new line *@
										<p class="height-fix"></p>
									}
								}
								else
								{
									@* Ensure new line *@
									<p class="height-fix"></p>
								}
							</div>
						</div>
						<button class="@ResponsiveButton" @onclick="AdvanceQuiz">
							@BtnText
						</button>

					</div>
				}
				else
				{
					@if (!StartReview)
					{
						@if (PerfectResult)
						{
							<div class="text-center">
								<p>Perfect Result!</p>
								<button class="btn btn-success" @onclick="NavigateToHome">Return to home</button>
							</div>
						}
						else
						{
							<div class="text-center">
								<p>Would you like to review the incorrect prompts?</p>
								<button class="btn btn-success" @onclick="EnableStartReview">Review Notes</button>
								<button class="btn btn-light" @onclick="NavigateToHome">Return to home</button>
							</div>
						}
					}
					else
					{
						@if (!ReviewComplete)
						{
							<div>
								<h4 class="text-secondary">@returnedPrompts.Prompts[errorIndexes[ReviewIndex]][0].ToString()</h4>
								<h2 class="mb-3">@returnedPrompts.Prompts[errorIndexes[ReviewIndex]][1].ToString()</h2>

								<p class="text-danger">@WarnAPIUsage</p>



								<div class="mt-3 mb-5">
									<div class="d-flex flex-row mt-3">
										<div class="synonyms-50">

											<h3>Synonyms</h3>
											<form>
												<label for="synonymInput">Having trouble? Find a synonym!</label>
												<br />
												<input id="synonymInput" type="text" class="review-input shadow-lg my-2" @bind="@Response" />
											</form>
											<div class="my-2">
												@* <label class="mt-1" for="fromLocales">Text language:</label>
												<select class="mt-1" id="fromLocales" @bind="FromLocal">
													<option value="@Locales.en">English</option>
													<option value="@Locales.es">Spanish</option>
													<option value="@Locales.ie">Irish</option>
													<option value="@Locales.de">German</option>
													<option value="@Locales.fr">French</option>
												</select> *@

												<p>Only supported for English</p>
												<button class="btn btn-light mt-1 ms-3" @onclick="genSynonyms">Find Synonyms</button>
												@if (finalSynonyms.Count() > 0)
												{
													<div class="card bg-light text-dark my-3">
														<div class="card-body">
															@foreach (var word in finalSynonyms)
															{
																<h4 class="text-center">@word</h4>
															}
														</div>
													</div>
												}
											</div>
										</div>

										<div class="translation-50">
											<h3>Translation</h3>

											<form>
												<label for="translationInput">Translate text to english to find synonyms</label>
												<br />
												<input id="translationInput" type="text" class="review-input shadow-lg my-2" @bind="@TranslationText" />
											</form>

											<div class="my-2">
												<label class="mt-1" for="fromLocales">From:</label>
												<select class="mt-1" id="fromLocales" @bind="FromLocal">
													<option value="@Locales.en">English</option>
													<option value="@Locales.es">Spanish</option>
													<option value="@Locales.ie">Irish</option>
													<option value="@Locales.de">German</option>
													<option value="@Locales.fr">French</option>
												</select>

												<label for="toLocales">To:</label>
												<select id="toLocales" @bind="ToLocal">
													<option value="@Locales.es">Spanish</option>
													<option value="@Locales.en">English</option>
													<option value="@Locales.ie">Irish</option>
													<option value="@Locales.de">German</option>
													<option value="@Locales.fr">French</option>
												</select>

												<button class="btn btn-light mt-1 ms-3" @onclick="callTranslate">Translate</button>


												@if (finalTranslations.Count() > 0)
												{
													<div class="card bg-light text-dark my-3">
														<div class="card-body">
															@foreach (var word in finalTranslations)
															{
																<h4 class="text-center">@word</h4>
															}
														</div>
													</div>
												}
											</div>
										</div>
									</div>
								</div>
								<button class="btn btn-success" @onclick="e => {
									if (ReviewIndex < errorIndexes.Count() - 1)
									{
										ReviewIndex++;
									}
									else
									{
										ReviewComplete = true;
									}
									}">
									Review Next
								</button>
							</div>
						}
						else
						{
							<div class="text-center">
								<p>Review Complete!</p>
								<button class="btn btn-success" @onclick="NavigateToHome">Return to home</button>
							</div>
						}
					}
				}
			</div>
		</div>
	</div>
	@*<button class="btn btn-light" @onclick="testTranslate">Log a test translate</button>*@
	@*<button class="btn btn-light" @onclick="testCallSyn">Log a test synonym</button>*@
</div>

@code
{
	public String? urlGetPrompts = "";

	[Parameter]
	public string Title { get; set; } = string.Empty;

	private DocPrompts returnedPrompts = new DocPrompts();
	private List<int> errorIndexes = new List<int>();

	// Quiz Logic
	String ResponsiveButton = "btn btn-light btn-lg btn-block mt-5";
	bool PromptComplete { get; set; } = false;
	bool CorrectDisplay { get; set; } = false;
	string Response { get; set; } = string.Empty;
	string TranslationText { get; set; } = string.Empty;
	Outcome RoundResult { get; set; } = new Outcome();
	string Ans { get; set; } = string.Empty;
	string UserAttemptRed { get; set; } = string.Empty;
	string UserAttemptGreen { get; set; } = string.Empty;
	bool QuizComplete { get; set; } = false;
	string BtnText { get; set; } = "Check Answer";
	bool PerfectResult { get; set; } = true;

	// Review Logic
	bool ReviewComplete { get; set; } = false;
	bool StartReview { get; set; } = false;
	string WarnAPIUsage { get; set; } = string.Empty;

	int score;
	string CurrentHeading { get; set; } = "";
	int QuizIndex { get; set; } = 0;
	int ReviewIndex { get; set; } = 0;

	public void EnableStartReview()
	{
		StartReview = true;
	}

	// Additional APIs

	public enum Locales
	{
		en,
		es,
		de,
		fr,
		ie
	}

	List<string> finalSynonyms = new List<string>();
	List<string> finalTranslations = new List<string>();

	Locales FromLocal { get; set; } = Locales.en;
	Locales ToLocal { get; set; } = Locales.es;

	async Task genSynonyms()
	{
		try
		{
			finalSynonyms = await callSynonyms(Response);
		}
		catch (HttpRequestException e)
		{
			Console.WriteLine(e.Message);
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	async Task<List<string>> callSynonyms(string wordIn)
	{
		string URIDictionaryAPI = "https://api.dictionaryapi.dev/api/v2/entries/en/";

		var synonyms = new List<string>();
		var client = new HttpClient();
		var response = await client.GetStringAsync(URIDictionaryAPI + wordIn);

		var tempObject = JsonSerializer.Deserialize<JsonElement>(response);

		int synonymsAdded = 0;
		foreach (var meaning in tempObject[0].GetProperty("meanings").EnumerateArray())
		{
			foreach (var synonym in meaning.GetProperty("synonyms").EnumerateArray())
			{
				if (synonymsAdded >= 5)
				{
					break;
				}
				synonymsAdded++;

				synonyms.Add(synonym.GetString());
			}
			if (synonymsAdded >= 5)
			{
				break;
			}
		}
		return synonyms;
	}

	async Task callTranslate()
	{
		try
		{
			finalTranslations = await Translate(TranslationText, FromLocal, ToLocal);
		}
		catch (HttpRequestException e)
		{
			Console.WriteLine(e.Message);
		}
		catch (Exception e)
		{
			Console.WriteLine(e.Message);
		}
	}

	async Task<List<string>> Translate(string textIn, Locales localFrom, Locales localTo)
	{
		List<string> responseTranslations = new List<string>();
		var client = new HttpClient();
		var request = new HttpRequestMessage
			{
				Method = HttpMethod.Post,
				RequestUri = new Uri("https://google-translate1.p.rapidapi.com/language/translate/v2"),
				Headers =
		{
		{ "X-RapidAPI-Key", "3dd5c1afa7msha944fd8168e4e91p1e3b4ajsn41765a294a16" },
		{ "X-RapidAPI-Host", "google-translate1.p.rapidapi.com" },
		},
				Content = new FormUrlEncodedContent(new Dictionary<string, string>
		{
		{ "source", localFrom.ToString() },
		{ "target", localTo.ToString() },
		{ "q", textIn },
		}),
			};

		using (var response = await client.SendAsync(request))
		{
			response.EnsureSuccessStatusCode();
			var body = await response.Content.ReadAsStringAsync();
			var tempObject = NJson.JsonConvert.DeserializeObject<dynamic>(body);

			foreach (var translation in tempObject.data.translations)
			{
				responseTranslations.Add(translation.translatedText.ToString());
			}

			return responseTranslations;
		}
	}

	//void testCallSyn()
	//{
	//	callSynonyms("Notes");
	//}

	public class Outcome
	{
		public bool AreEqual { get; set; }
		public int Index { get; set; }
		public string CorrectAnswer { get; set; }
		public string UserAttempt { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			var jsonString = await Http.GetStringAsync("https://europe-west1-tomanota-374115.cloudfunctions.net/get-prompts?q=" + Title.ToString());
			returnedPrompts.Prompts = JsonSerializer.Deserialize<List<List<object>>>(jsonString);
			returnedPrompts.numOfPrompts = returnedPrompts.Prompts.Count();
			//Console.WriteLine(returnedPrompts.Prompts[0][1].ToString());
			CurrentHeading = returnedPrompts.Prompts[0][0].ToString();
		}
		catch
		{
			Console.WriteLine("Service unavailable");
		}
	}

	public class DocPrompts
	{
		public List<List<object>>? Prompts { get; set; } = new List<List<object>>();
		public int numOfPrompts { get; set; }

	}

	public async Task GetResponseAsync()
	{
		if (Response != "")
		{
			RoundResult = await Http.GetFromJsonAsync<Outcome>($"https://europe-west1-tomanota-374115.cloudfunctions.net/check-prompts?q={Response.ToString()}&a={Ans}");
		}
		else
		{
			RoundResult = new Outcome() { AreEqual = false, CorrectAnswer = returnedPrompts.Prompts[QuizIndex][1].ToString(), Index = -1, UserAttempt = "" };
		}
	}

	public void DisplayAns()
	{
		if (RoundResult.AreEqual)
		{
			BtnText = "Correct";
			ResponsiveButton = "btn btn-success btn-lg btn-block mt-5";
			CorrectDisplay = true;
		}
		else
		{
			BtnText = "Continue";
			PerfectResult = false;
			errorIndexes.Add(QuizIndex);
			CurrentHeading = $"{returnedPrompts.Prompts[QuizIndex][0].ToString()} 🠮 {RoundResult.CorrectAnswer}";
			// Feedback = $"Expected answer: {RoundResult.CorrectAnswer}";
			if (RoundResult.Index == 0)
			{
				UserAttemptRed = RoundResult.UserAttempt.ToString();
			}
			else
			{
				for (int i = 0; i < RoundResult.UserAttempt.Count(); i++)
				{
					if (i < RoundResult.Index)
					{
						UserAttemptGreen += RoundResult.UserAttempt[i].ToString();
					}
					else
					{
						UserAttemptRed += RoundResult.UserAttempt[i].ToString();
					}
				}

				//UserAttemptGreen = RoundResult.UserAttempt.ToString().Substring(0, RoundResult.Index).ToString();
				//UserAttemptRed = RoundResult.UserAttempt.ToString().Substring(RoundResult.Index, RoundResult.UserAttempt.ToString().Count() - 1).ToString();
			}
			ResponsiveButton = "btn btn-danger btn-lg btn-block mt-5";
		}
		PromptComplete = true;
	}

	public async void AdvanceQuiz()
	{
		@* To check answer *@
		if (!PromptComplete)
		{
			// Checking Ans

			if (Response == string.Empty)
			{
				Console.WriteLine("No Attempt!");
			}
			else
			{
				//if (!String.IsNullOrEmpty(returnedPrompts.Prompts[quizIndex][1].ToString())) {
				Ans = returnedPrompts.Prompts[QuizIndex][1].ToString();
				await GetResponseAsync();

				DisplayAns();
				await InvokeAsync(StateHasChanged);
			}

		}
		else
		{
			// Waiting for response

			BtnText = "Check Answer";
			PromptComplete = false;
			// Feedback = "Expected Answer: ";
			CorrectDisplay = false;
			Response = "";
			UserAttemptGreen = "";
			UserAttemptRed = "";
			ResponsiveButton = "btn btn-light btn-lg btn-block mt-5";

			if (QuizIndex < returnedPrompts.numOfPrompts - 1)
			{
				QuizIndex++;
				CurrentHeading = returnedPrompts.Prompts[QuizIndex][0].ToString();
			}
			else
			{
				QuizComplete = true;
			}
		}
	}

	private void NavigateToHome()
	{
		NavigationManager.NavigateTo("/");
	}
		}
