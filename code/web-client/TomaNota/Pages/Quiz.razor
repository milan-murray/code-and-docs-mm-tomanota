@page "/quiz"
@page "/quiz/{title}"
@using System.Text.Json
@inject HttpClient Http

<PageTitle>Note Learning Session</PageTitle>

<style>
	.quiz-element {
		height: 50vh;
		align-content: center;
		text-align: center;
	}

	.quiz-input {
		width: 100%;
		padding: 0.5em;
		border: none;
		border-radius: 0.3em;
	}

	.btn-block {
		width: 100%;
	}
</style>

<div class="container">
	<div class="card bg-dark text-light shadow">
		<div class="card-header">
			<h3>@Title</h3>
		</div>

		<div class="quiz-element card-body text-center bg-dark text-light">
			<div class="container mt-5">
				@if (!QuizComplete)
				{
					@if (CurrentHeading == string.Empty)
					{
						<div class="spinner-border" role="status">
							<span class="sr-only"></span>
						</div>
					}
					else
					{
						<h3>@CurrentHeading</h3>
					}

					<div class="">
						<input type="text" class="quiz-input shadow-lg mt-3" @bind="@Response" />
						<div class="mt-5">
							<div class="text-center">
								@if (promptComplete)
								{
									@if (CorrectDisplay)
									{
										<h3>Correct</h3>
									}
									else
									{
										<h3>@Feedback</h3> // Expected Answer
										<h3>Your repsonse: <span class="text-success">@UserAttemptGreen</span><span class="text-danger">@UserAttemptRed</span></h3>
									}
								}
								else
								{
									@* Ensure new line *@
									<p></p>
								}
							</div>
						</div>
						<button class="btn btn-light btn-lg btn-block" @onclick="AdvanceQuiz">
							@BtnText
						</button>
					</div>
				} else {
					@if (PerfectResult)
					{
						<div class="text-center">
							<p>Perfect Result!</p>
							<button class="btn btn-success">Return to home</button>
						</div>
					} else {
						<div class="text-center">
							<p>Would you like to review the incorrect prompts?</p>
							<button class="btn btn-success">Review Notes</button>
							<button class="btn btn-light">Return to home</button>
						</div>
					}
				}
			</div>
		</div>
	</div>
</div>
@code
{
	public String? urlGetPrompts = "";

	[Parameter]
	public string Title { get; set; } = string.Empty;

	private DocPrompts returnedPrompts = new DocPrompts();
	private List<int> errorIndexes = new List<int>();

	// Quiz Logic
	String responsiveBg = "card-body text-center bg-dark text-light";
	bool promptComplete = false;
	bool PerfectResult { get; set; } = true;
	bool CorrectDisplay { get; set; } = false;
	// bool ErrorSplit { get; set; } = false;
	string Response { get; set; } = string.Empty;
	Outcome RoundResult { get; set; } = new Outcome();
	string Ans { get; set; } = string.Empty;
	string Feedback { get; set; } = string.Empty;
	string UserAttemptRed { get; set; } = string.Empty;
	string UserAttemptGreen { get; set; } = string.Empty;
	bool QuizComplete { get; set; } = false;
	string BtnText { get; set; } = "Check Answer";


	int score;
	string CurrentHeading { get; set; } = "";
	int quizIndex = 0;

	public class Outcome
	{
		public bool AreEqual { get; set; }
		public int Index { get; set; }
		public string CorrectAnswer { get; set; }
		public string UserAttempt { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		var jsonString = await Http.GetStringAsync("https://europe-west1-tomanota-374115.cloudfunctions.net/get-prompts?q=" +
		Title.ToString());
		returnedPrompts.Prompts = JsonSerializer.Deserialize<List<List<object>>>(jsonString);
		returnedPrompts.numOfPrompts = returnedPrompts.Prompts.Count();
		Console.WriteLine(returnedPrompts.Prompts[0][1].ToString());
		CurrentHeading = returnedPrompts.Prompts[0][0].ToString();
	}

	public class DocPrompts
	{
		public List<List<object>>? Prompts { get; set; } = new List<List<object>>();
		public int numOfPrompts { get; set; }

	}

	public async Task GetResponseAsync()
	{
		RoundResult = await
		Http.GetFromJsonAsync<Outcome>($"https://europe-west1-tomanota-374115.cloudfunctions.net/check-prompts?q={Response.ToString()}&a={Ans}");
	}

	public void DisplayAns()
	{
		if (RoundResult.AreEqual)
		{
			Feedback = "Correct";
			responsiveBg = "card-body text-center bg-success text-light";
			CorrectDisplay = true;
			// Console.WriteLine(Feedback);
		}
		else
		{
			PerfectResult = false;
			errorIndexes.Add(quizIndex);
			Feedback = $"Expected answer: {RoundResult.CorrectAnswer}";
			if (RoundResult.Index == 0)
			{
				UserAttemptRed = RoundResult.UserAttempt.ToString();
			} else
			{
				for (int i = 0; i < RoundResult.UserAttempt.Count(); i++)
				{
					if (i < RoundResult.Index)
					{
						UserAttemptGreen += RoundResult.UserAttempt[i].ToString();
					}
					else
					{
						UserAttemptRed += RoundResult.UserAttempt[i].ToString();
						
					}
				}

				//UserAttemptGreen = RoundResult.UserAttempt.ToString().Substring(0, RoundResult.Index).ToString();
				//UserAttemptRed = RoundResult.UserAttempt.ToString().Substring(RoundResult.Index, RoundResult.UserAttempt.ToString().Count() - 1).ToString();
			}
			responsiveBg = "card-body text-center bg-danger text-light";
			// Console.WriteLine(Feedback);
		}
		promptComplete = true;
	}

	public async void AdvanceQuiz()
	{
		@* To check answer *@
		if (!promptComplete)
		{
			BtnText = "Continue";
			// Console.WriteLine("Quiz index: " + quizIndex);

			//if (!String.IsNullOrEmpty(returnedPrompts.Prompts[quizIndex][1].ToString())) {
			Ans = returnedPrompts.Prompts[quizIndex][1].ToString();
			await GetResponseAsync();

			DisplayAns();
			await InvokeAsync(StateHasChanged);
		}
		else
		{
			BtnText = "Check Answer";
			promptComplete = false;
			Feedback = "Expected Answer: ";
			CorrectDisplay = false;
			Response = "";
			UserAttemptGreen = "";
			UserAttemptRed = "";
			responsiveBg = "card-body text-center bg-dark text-light";

			if (quizIndex < returnedPrompts.numOfPrompts - 1)
			{
				quizIndex++;
				CurrentHeading = returnedPrompts.Prompts[quizIndex][0].ToString();
			}
			else
			{
				QuizComplete = true;
			}
			// Console.WriteLine("Quiz index: " + quizIndex);

		}
	}
}
