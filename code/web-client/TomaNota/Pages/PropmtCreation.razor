@page "/prompt-creation"
@using System.Text.Json
@using System.Text
@using System
@using System.Web
@using System.Text.Json.Serialization
@using System.Net.Http.Json
@using Google.Cloud.Firestore
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IFirebaseAuthService FirebaseAuthService

<PageTitle>TomaNota - Prompt Creation</PageTitle>

<style>
	.form-group {
		display: flex;
		flex: 0 0 auto;
		flex-flow: row wrap;
		align-items: center;
		margin-bottom: 1em;
	}
</style>

<div class="container">
	<div class="card bg-dark">
		<div class="card-header">
			<h3>Create Notes</h3>
		</div>
		<div class="card-body">
			<div class="container">
				<div class="mb-3">
					<label for="title">Title</label>
					<input class="form-control" type="text" id="title" @bind="noteTitle"/>
					<small class="text-danger">@TitleErrorText</small>
				</div>

				@foreach (List<String> noteGroup in newNotes)
				{
					<form>
						<div class="form-group">
						<label>Given heading</label>
						<input class="form-control" type="text" @bind="noteGroup[0]" />
						<label class="mt-1">Answer</label>
						<input class="form-control" type="text" @bind="noteGroup[1]" />
						</div>
					</form>
				}
				@if (inputs > 10)
				{
					<h4 class="text-danger">Documents that are too large can be very difficult</h4>
				}
				<small class="text-danger">@BodyErrorText</small>
				<div class="d-flex justify-content-between">
					<div>
						<button class="btn btn-light m-1" @onclick="ExtendInput">Add Entry</button>
						<button class="btn btn-secondary m-1" @onclick="RemoveInput">Remove Entry</button>
					</div>
					<div>
						<button class="btn btn-success ms-auto" @onclick="CreateNotes">Save Notes</button>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

@code {
	List<List<string>> newNotes { get; set; } = new();
	string noteTitle = "";
	int inputs = 1;
	private static readonly HttpClient client = new HttpClient();
	String baseURI = "https://user-web-api-tn.azurewebsites.net";
	String TitleErrorText { get; set; } = String.Empty;
	String BodyErrorText { get; set; } = String.Empty;

	protected override async Task OnInitializedAsync()
	{
		if (FirebaseAuthService.FirebaseAuthClient.User == null)
		{
			// Navigate to home page if user has not signed in
			NavigationManager.NavigateTo("/");
		}
		newNotes.Add(new List<string> {"", ""});
	}

	public void ExtendInput()
	{
		inputs = inputs + 1;
		newNotes.Add(new List<string> {"", ""});
	}
	public void RemoveInput()
	{
		if (inputs > 1)
		{
			newNotes.RemoveAt(newNotes.Count() - 1);
			inputs = inputs - 1;
		}
	}

	public class TitleGroup
	{
		[JsonPropertyName("title")]
		public String Title { get; set; }
		[JsonPropertyName("score")]
		public int Score { get; set; }
		[JsonPropertyName("lastProgressed")]
		public TimeSpan? LastProgressed { get; set; }
	}

	public async Task CreateNotes()
	{
		noteTitle = noteTitle.Trim();
		if (noteTitle != string.Empty)
		{
			BodyErrorText = "";
			TitleErrorText = "";
			List<TitleGroup> existingTitleGroups = new List<TitleGroup>();
			List<String> existingTitles = new List<String>();
			string key = "X00162027";
			string user = FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString();
			string url_user_titles = $"{baseURI}/userNotes/key/{key}/user/{user}";
			try
			{
				var Response = await Http.GetAsync(url_user_titles);

				var JSONResponse = await Response.Content.ReadAsStringAsync();
				// Console.WriteLine(JSONResponse.ToString());
				existingTitleGroups = JsonSerializer.Deserialize<List<TitleGroup>>(JSONResponse);

				foreach (var titleGroup in existingTitleGroups)
				{
					existingTitles.Add(titleGroup.Title);
				}
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}

			bool valid = true;
			if (existingTitles.Contains(noteTitle) || noteTitle.Count() > 50)
			{
				TitleErrorText = "The title must be unique and less than 50 characters";
				valid = false;	
			}

			// TODO: Prevent special characters from being entered
			// TODO: Prevent titles from containing special characters and from being too long
			var content = "[";
			for (int i = 0; i < inputs - 1; i++)
			{
				if (newNotes.ElementAt(i).ElementAt(0).ToString().Trim() == String.Empty || newNotes.ElementAt(i).ElementAt(1).ToString().Trim() == String.Empty)
				{
					valid = false;
					BodyErrorText = "Entries can not be left empty";
					break;
				}
				content += $"[\"{HttpUtility.HtmlEncode(newNotes.ElementAt(i).ElementAt(0)).Trim()}\", \"{HttpUtility.HtmlEncode(newNotes.ElementAt(i).ElementAt(1)).Trim()}\"],";
			}
			if (newNotes.ElementAt(inputs - 1).ElementAt(0).ToString().Trim() == String.Empty || newNotes.ElementAt(inputs - 1).ElementAt(1).ToString().Trim() == String.Empty)
			{
				BodyErrorText = "Entries can not be left empty";
				valid = false;
			}
			content += $"[\"{HttpUtility.HtmlEncode(newNotes.ElementAt(inputs - 1).ElementAt(0)).Trim()}\", \"{HttpUtility.HtmlEncode(newNotes.ElementAt(inputs - 1).ElementAt(1)).Trim()}\"]]";

			if (valid)
			{
				var Content = new StringContent(content, Encoding.UTF8, "application/json");

				var uri = $"{baseURI}/userNotes/newNote/key/{key}/userIn/{user}/titleIn/{HttpUtility.HtmlEncode(noteTitle)}/scoreIn/0";

				try
				{
					await client.PostAsync(uri, Content);
					NavigationManager.NavigateTo("/");
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}
			}
		}
		else
		{
			TitleErrorText = "Title cannot be empty";
		}
	}
}
