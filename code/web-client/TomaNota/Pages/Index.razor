@page "/"
@using Microsoft.JSInterop
@using System
@using System.Web
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime IJSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IFirebaseAuthService FirebaseAuthService

<PageTitle>TomaNota</PageTitle>

<style>
	.top-section {
		min-height: 50vh;
		margin-bottom: 10em;
	}

	.bottom-section {
		max-height: 15em;
		padding-right: 1em;
		padding-left: 1em;
	}

	.btn-block {
		width: 100%;
	}

	.min-btn {
		min-width: 30vh;
	}

	.min-height-title {
		min-height: 3vh;
	}
</style>

<div class="top-section container">
	@if (FirebaseAuthService.FirebaseAuthClient.User != null)
	{
		<div class="card bg-light text-dark shadow mb-5">
			<div class="card-header">
				<h4>Your Notes</h4>
			</div>
			<div class="card-body">
				<div class="d-flex justify-content-evenly flex-wrap">
					@if (awaitingTitles)
					{
						<div class="spinner-border" role="status">
							<span class="sr-only"></span>
						</div>
					}
					else if (GroupedUserTitles != null)
					{
						@foreach (var groupedTitle in GroupedUserTitles)
						{
							@if (groupedTitle.Score == 10)
							{
								<button class="btn btn-light border border-success m-1 mb-3 min-btn shadow" @onclick="@(e => SelectNote(HttpUtility.HtmlDecode(groupedTitle.Title), false))">
									<div>
										<div class="min-height-title">@HttpUtility.HtmlDecode(groupedTitle.Title)</div>
										<br />
										<small class="text-success">
											<strong>Notes complete!</strong>
										</small>
									</div>
								</button>
							}
							else if (groupedTitle.LastProgressed == null)
							{
								<button class="btn btn-primary m-1 mb-3 min-btn shadow" @onclick="@(e => SelectNote(HttpUtility.HtmlDecode(groupedTitle.Title), false))"><div>@HttpUtility.HtmlDecode(groupedTitle.Title)<br /><small class="text-info">New!</small></div></button>
							}
							else if (groupedTitle.Score <= 2)
							{
								<button class="btn btn-light m-1 mb-3 min-btn border border-danger shadow" @onclick="@(e => SelectNote(HttpUtility.HtmlDecode(groupedTitle.Title), false))">
									<div class="clearfix">
										<div class="min-height-title">@HttpUtility.HtmlDecode(groupedTitle.Title)</div>
										<br />
										<div class="float-start rounded bg-danger text-light px-2">
											<small>@groupedTitle.Score</small>
										</div>
										@if (groupedTitle.LastProgressed < TimeSpan.FromHours(4))
										{
											<div class="float-end rounded bg-secondary text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
										else
										{
											<div class="float-end rounded bg-success text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
									</div>
								</button>
							}
							else if (groupedTitle.Score <= 5)
							{
								<button class="btn btn-light m-1 mb-3 min-btn border border-warning shadow" @onclick="@(e => SelectNote(HttpUtility.HtmlDecode(groupedTitle.Title), false))">
									<div class="clearfix">
										<div class="min-height-title">@HttpUtility.HtmlDecode(groupedTitle.Title)</div>
										<br />
										<div class="float-start rounded bg-warning text-light px-2">
											<small>@groupedTitle.Score</small>
										</div>
										@if (groupedTitle.LastProgressed < TimeSpan.FromHours(4))
										{
											<div class="float-end rounded bg-secondary text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
										else
										{
											<div class="float-end rounded bg-success text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
									</div>
								</button>
							}
							else if (groupedTitle.Score <= 7)
							{
								<button class="btn btn-light m-1 mb-3 min-btn border border-primary shadow" @onclick="@(e => SelectNote(HttpUtility.HtmlDecode(groupedTitle.Title), false))">
									<div class="clearfix">
										<div class="min-height-title">@HttpUtility.HtmlDecode(groupedTitle.Title)</div>
										<br />
										<div class="float-start rounded bg-primary text-light px-2">
											<small>@groupedTitle.Score</small>
										</div>
										@if (groupedTitle.LastProgressed < TimeSpan.FromHours(4))
										{
											<div class="float-end rounded bg-secondary text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
										else
										{
											<div class="float-end rounded bg-success text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
									</div>
								</button>
							}
							else
							{
								<button class="btn btn-light m-1 mb-3 min-btn border border-success shadow" @onclick="@(e => SelectNote(HttpUtility.HtmlDecode(groupedTitle.Title), false))">
									<div class="clearfix">
										<div class="min-height-title">@HttpUtility.HtmlDecode(groupedTitle.Title)</div>
										<br />
										<div class="float-start rounded bg-success text-light px-2">
											<small>@groupedTitle.Score</small>
										</div>
										@if (groupedTitle.LastProgressed < TimeSpan.FromHours(4))
										{
											<div class="float-end rounded bg-secondary text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
										else
										{
											<div class="float-end rounded bg-success text-light px-2">
												<small>
													@string.Format("{0:%h}h ago", groupedTitle.LastProgressed)
												</small>
											</div>
										}
									</div>
								</button>
							}
						}
					}
				</div>
				<div class="d-flex justify-content-center mt-2">
					<button class="btn btn-success m-1 btn-block" @onclick="NavigateToCreate">Create New</button>
					<button class="btn btn-danger m-1 btn-block" @onclick="DeleteUserNote" disabled="@TitleIsNotReady">Delete Note</button>
				</div>
			</div>
		</div>
	}
	<Accordion>
		<Collapse Visible="@englishVisible">
			<CollapseHeader>
				<Heading Size="HeadingSize.Is5">
					<AccordionToggle>Premade notes for English speakers</AccordionToggle>
				</Heading>
			</CollapseHeader>
			<CollapseBody>
				<div class="card bg-light text-dark mb-3">
					<div class="card-header">
						<h5>Spanish</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (SpanishTitlesEN == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								try
								{
									@foreach (var title in SpanishTitlesEN)
									{
										@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
										{
											<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
										}
										else{
											<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
										}
									}
								}
								catch (Exception e)
								{
									Console.WriteLine(e.Message);
								}
							}
						</div>
					</div>
				</div>
				<div class="card bg-light text-dark mb-3">
					<div class="card-header">
						<h5>German</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (GermanTitlesEN == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								@foreach (var title in GermanTitlesEN)
								{
									@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
									{
										<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
									else
									{
										<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
								}
							}
						</div>
					</div>
				</div>
				<div class="card bg-light text-dark">
					<div class="card-header">
						<h5>Irish</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (IrishTitlesEN == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								@foreach (var title in IrishTitlesEN)
								{
									@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
									{
										<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
									else
									{
										<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
								}
							}
						</div>
					</div>
				</div>
			</CollapseBody>
		</Collapse>

		<Collapse Visible="@spanishVisible">
			<CollapseHeader>
				<Heading Size="HeadingSize.Is5">
					<AccordionToggle>Notas prehechas para hispanohablantes</AccordionToggle>
				</Heading>
			</CollapseHeader>
			<CollapseBody>
				<div class="card bg-light text-dark mb-3">
					<div class="card-header">
						<h5>Inglés</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (EnglishTitlesES == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								@foreach (var title in EnglishTitlesES)
								{
									@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
									{
										<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
									else
									{
										<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
								}
							}
						</div>
					</div>
				</div>
				<div class="card bg-light text-dark">
					<div class="card-header">
						<h5>Alemán</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (GermanTitlesES == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								@foreach (var title in GermanTitlesES)
								{
									@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
									{
										<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
									else
									{
										<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
								}
							}
						</div>
					</div>
				</div>
			</CollapseBody>
		</Collapse>
		<Collapse Visible="@germanVisible">
			<CollapseHeader>
				<Heading Size="HeadingSize.Is5">
					<AccordionToggle>vorgefertigte Notizen ~ Deutschsprachige</AccordionToggle>
				</Heading>
			</CollapseHeader>
			<CollapseBody>
				<div class="card bg-light text-dark mb-3">
					<div class="card-header">
						<h5>Englisch</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (EnglishTitlesDE == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								@foreach (var title in EnglishTitlesDE)
								{
									@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
									{
										<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
									else
									{
										<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
								}
							}
						</div>
					</div>
				</div>
				<div class="card bg-light text-dark">
					<div class="card-header">
						<h5>Spanisch</h5>
					</div>
					<div class="card-body">
						<div class="d-flex justify-content-evenly flex-wrap">
							@if (SpanishTitlesDE == null)
							{
								<div class="spinner-border" role="status">
									<span class="sr-only"></span>
								</div>
							}
							else
							{
								@foreach (var title in SpanishTitlesDE)
								{
									@if (FirebaseAuthService.FirebaseAuthClient.User != null && completedPremadeNotes.Contains(title))
									{
										<button class="btn btn-success m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
									else
									{
										<button class="btn btn-primary m-1" @onclick="@(e => SelectNote(title, true))">@title</button>
									}
								}
							}
						</div>
					</div>
				</div>
			</CollapseBody>
		</Collapse>
	</Accordion>
</div>
<div class="rounded-top bg-dark mt-3 mx-3 fixed-bottom bottom-section shadow">
	<div class="card-body">
		<div class="text-center">
			<p>@SelectedTitle</p>
		</div>
		<div>
			<button class="btn btn-light btn-lg btn-block my-1" disabled="@TitleIsNotReady" @onclick="NavigateToReview">
				Review
				Notes
			</button>
		</div>
		<div>
			<button class="btn btn-light btn-lg btn-block my-1" disabled="@TitleIsNotReady" @onclick="NavigateToQuiz">Attempt Notes</button>
		</div>
	</div>
</div>

@code
{
	String? SelectedTitle { get; set; }
	Boolean TitleIsNotReady { get; set; } = true;
	Boolean TitleIsPremade { get; set; }
	Boolean awaitingTitles = true;
	List<TitleGroup>? GroupedUserTitles { get; set; }
	List<string> completedPremadeNotes { get; set; } = new();
	String[]? EnglishTitlesES { get; set; }
	String[]? GermanTitlesES { get; set; }
	String[]? SpanishTitlesEN { get; set; }
	String[]? GermanTitlesEN { get; set; }
	String[]? IrishTitlesEN { get; set; }
	String[]? SpanishTitlesDE { get; set; }
	String[]? EnglishTitlesDE { get; set; }
	// String baseURI = "https://user-web-api20230425222103.azurewebsites.net";
	String baseURI = "https://localhost:7080";

	// Accordion
	bool englishVisible = true;
	bool spanishVisible = false;
	bool germanVisible = false;

	public enum Language
	{
		English,
		Spanish,
		German
	}

	public class TitleGroup
	{
		[JsonPropertyName("title")]
		public String Title { get; set; }
		[JsonPropertyName("score")]
		public int Score { get; set; }
		[JsonPropertyName("lastProgressed")]
		public TimeSpan? LastProgressed { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		try
		{
			if (FirebaseAuthService.FirebaseAuthClient.User != null)
			{
				string key = "X00162027";
				string user = HttpUtility.HtmlEncode(FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString());
				string url_user_titles = $"{baseURI}/userNotes/key/{key}/user/{user}";
				try
				{
					var Response = await Http.GetAsync(url_user_titles);

					var JSONResponse = await Response.Content.ReadAsStringAsync();
					// Console.WriteLine(JSONResponse.ToString());
					GroupedUserTitles = JsonSerializer.Deserialize<List<TitleGroup>>(JSONResponse);
				}
				catch
				{
					// Console.WriteLine(e.Message);
				}


				// If user has completed a premade note
				string url_CompletedTiltes = $"{baseURI}/userNotes/completedPremades/keyIn/{key}/userIn/{user}";

				try
				{
					var Response = await Http.GetAsync(url_CompletedTiltes);

					var JSONResponse = await Response.Content.ReadAsStringAsync();
					// Console.WriteLine(JSONResponse.ToString());
					completedPremadeNotes = JsonSerializer.Deserialize<List<string>>(JSONResponse);
				}
				catch
				{
					
				}

				awaitingTitles = false;

				try
				{
					var langUri = $"{baseURI}/userNotes/language/keyIn/{key}/userIn/{user}";
					Language tempLang = await Http.GetFromJsonAsync<Language>(langUri);
					if (tempLang == Language.English)
					{
						englishVisible = true;
						spanishVisible = false;
						germanVisible = false;
					}
					else if (tempLang == Language.Spanish)
					{
						englishVisible = false;
						spanishVisible = true;
						germanVisible = false;
					}
					else if (tempLang == Language.German)
					{
						englishVisible = false;
						spanishVisible = false;
						germanVisible = true;
					}
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}
			}
			string url_EN_titles_ES = "https://europe-west1-tomanota-374115.cloudfunctions.net/get-EN-titles-ES";
			string url_ES_titles_EN = "https://europe-west1-tomanota-374115.cloudfunctions.net/get-ES-titles-EN";
			string url_EN_titles_DE = "https://europe-west1-tomanota-374115.cloudfunctions.net/get-EN-titles-DE";
			string url_EN_titles_IE = "https://europe-west1-tomanota-374115.cloudfunctions.net/get-EN-titles-IE";
			string url_DE_titles_EN = "https://europe-west1-tomanota-374115.cloudfunctions.net/get-DE-titles-EN";
			SpanishTitlesEN = await Http.GetFromJsonAsync<String[]?>(url_EN_titles_ES);
			GermanTitlesEN = await Http.GetFromJsonAsync<String[]?>(url_EN_titles_DE);
			IrishTitlesEN = await Http.GetFromJsonAsync<String[]?>(url_EN_titles_IE);

			EnglishTitlesES = await Http.GetFromJsonAsync<String[]?>(url_ES_titles_EN);
			EnglishTitlesDE = await Http.GetFromJsonAsync<String[]?>(url_EN_titles_DE);

		}
		catch (HttpRequestException e)
		{
			Console.WriteLine(e.Message);
		}
	}

	async Task DeleteUserNote()
	{
		if (FirebaseAuthService.FirebaseAuthClient.User != null && !TitleIsPremade)
		{
			bool result = await IJSRuntime.InvokeAsync<bool>("confirm", "Delete notes? This action cannot be undone.");
			if (result)
			{
				string key = "X00162027";
				string user = HttpUtility.HtmlEncode(FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString());
				string url = $"{baseURI}/userNotes/delete/key/{key}/user/{user}/title/{HttpUtility.HtmlEncode(SelectedTitle)}";
				await Http.DeleteAsync(url);
				foreach (var groupTitle in GroupedUserTitles)
				{
					if (groupTitle.Title == HttpUtility.HtmlEncode(SelectedTitle))
					{
						GroupedUserTitles.Remove(groupTitle);
						break;
					}
				}
				SelectedTitle = String.Empty;
				TitleIsNotReady = true;
			}
		}
	}

	private void NavigateToReview()
	{
		if (SelectedTitle != null)
		{
			NavigationManager.NavigateTo("view-document/" + HttpUtility.HtmlEncode(SelectedTitle) + "/" + TitleIsPremade);
		}
	}

	private void NavigateToQuiz()
	{
		if (SelectedTitle != null)
		{
			NavigationManager.NavigateTo("quiz/" + HttpUtility.HtmlEncode(SelectedTitle) + "/" + TitleIsPremade);
		}
	}


	private void NavigateToCreate()
	{
		NavigationManager.NavigateTo("prompt-creation/");
	}

	private void SelectNote(String titleIn, bool premadeIn)
	{
		SelectedTitle = titleIn;
		TitleIsNotReady = false;
		TitleIsPremade = premadeIn;
	}
}
