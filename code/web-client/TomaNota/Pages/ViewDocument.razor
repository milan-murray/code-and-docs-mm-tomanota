@page "/view-document"
@page "/view-document/{title}/{premade:bool}"
@using System.Text.Json
@using System.Web
@inject IFirebaseAuthService FirebaseAuthService
@inject NavigationManager NavigationManager
@inject HttpClient Http
<PageTitle>View Document</PageTitle>

<style>
	.btn-block {
		width: 100%;
	}
</style>

<div class="container">
	<div class="card bg-dark text-light my-3 shadow">
		@if (returnedPrompts == null)
		{
			<p><em>Loading...</em></p>
		}
		else
		{
			<div class="card-header text-center">
				<h1>@HttpUtility.HtmlDecode(Title)</h1>
				@if (ContainsScore)
				{
					@if (returnedPrompts.Score <= 2)
					{
						<small class="rounded py-1 px-2 border border-light bg-danger text-light"><strong>Overall score: @returnedPrompts.Score</strong></small>
					}
					else if (returnedPrompts.Score <= 5)
					{
						<small class="rounded py-1 px-2 border border-light bg-warning text-light"><strong>Overall score: @returnedPrompts.Score</strong></small>
					}
					else if (returnedPrompts.Score <= 7)
					{
						<small class="rounded py-1 px-2 border border-light bg-primary text-light"><strong>Overall score: @returnedPrompts.Score</strong></small>
					}
					else
					{
						<small class="rounded py-1 px-2 border border-light bg-success text-light"><strong>Overall score: @returnedPrompts.Score</strong></small>
					}
				}
			</div>
			<div class="card-body">
				<div class="card mb-3">
					<table class="table table-light table-hover">
						<thead>
							<tr>
								<th>Given heading</th>
								<th>Answer</th>
							</tr>
						</thead>
						<tbody>
							@if (!Premade)
							{

								@foreach (var prompt in returnedPrompts.Prompts.Select((value, index) => new { value, index }))
								{
									@if (individualScores.ElementAtOrDefault(prompt.index) < 1)
									{
										<tr class="table-danger">
											<td>@HttpUtility.HtmlDecode(prompt.value[0].ToString())</td>
											<td>@HttpUtility.HtmlDecode(prompt.value[1].ToString())</td>
										</tr>
									}
									else if (individualScores.ElementAtOrDefault(prompt.index) < 2)
									{
										<tr class="table-warning">
											<td>@HttpUtility.HtmlDecode(prompt.value[0].ToString())</td>
											<td>@HttpUtility.HtmlDecode(prompt.value[1].ToString())</td>
										</tr>
									}
									else if (individualScores.ElementAtOrDefault(prompt.index) < 4)
									{
										<tr>
											<td>@HttpUtility.HtmlDecode(prompt.value[0].ToString())</td>
											<td>@HttpUtility.HtmlDecode(prompt.value[1].ToString())</td>
										</tr>
									}
									else
									{
										<tr class="table-success">
											<td>@HttpUtility.HtmlDecode(prompt.value[0].ToString())</td>
											<td>@HttpUtility.HtmlDecode(prompt.value[1].ToString())</td>
										</tr>
									}
								}
							}
							else
							{
								@foreach (var prompt in returnedPrompts.Prompts)
								{
									<tr>
										<td>@HttpUtility.HtmlDecode(prompt[0].ToString())</td>
										<td>@HttpUtility.HtmlDecode(prompt[1].ToString())</td>
									</tr>
								}

							}
						</tbody>
					</table>
				</div>
				<button class="btn btn-light btn-block" @onclick="NavigateToQuiz">Attempt Notes</button>
			</div>
		}
	</div>
</div>

@code {
	[Parameter]
	public String? Title { get; set; }
	[Parameter]
	public bool Premade { get; set; }
	private DocPrompts? returnedPrompts = new DocPrompts();
	bool ContainsScore { get; set; } = false;
	String baseURI = "https://user-web-api-tn.azurewebsites.net";
	// String baseURI = "https://localhost:7080";
	List<int> individualScores = new();

	public class DocPrompts
	{
		public List<List<object>> Prompts { get; set; } = new List<List<object>>();
		public int Score { get; set; }
	}

	protected override async Task OnInitializedAsync()
	{
		if (Premade)
		{
			var jsonString = "[[]]";
			try
			{
				jsonString = await Http.GetStringAsync("https://europe-west1-tomanota-374115.cloudfunctions.net/get-prompts?q=" + Title.ToString());
			}
			catch (Exception e)
			{
				Console.WriteLine(e.Message);
			}
			returnedPrompts.Prompts = JsonSerializer.Deserialize<List<List<object>>>(jsonString);
			ContainsScore = returnedPrompts.Prompts[0].Count < 2;
		}
		else
		{
			if (FirebaseAuthService.FirebaseAuthClient.User != null)
			{
				string key = "X00162027";
				string user = HttpUtility.HtmlEncode(FirebaseAuthService.FirebaseAuthClient.User.Info.Email.ToString());
				var jsonString = await Http.GetStringAsync($"{baseURI}/userNotes/key/{key}/user/{user}/title/{Title.ToString()}");
				var scoreDetail = await Http.GetStringAsync($"{baseURI}/userNotes/scoreDetail/key/{key}/user/{user}/title/{Title.ToString()}");
				var scoreResponse = JsonSerializer.Deserialize<List<List<int>>>(scoreDetail);
				individualScores = scoreResponse.ElementAt(0);
				returnedPrompts.Score = Int32.Parse(await Http.GetStringAsync($"{baseURI}/userNotes/score/key/{key}/user/{user}/title/{Title.ToString()}"));
				returnedPrompts.Prompts = JsonSerializer.Deserialize<List<List<object>>>(jsonString);
				ContainsScore = true;
			}
			else
			{
				NavigationManager.NavigateTo("/");
			}
		}
	}

	private void NavigateToQuiz()
	{
		if (Title != null)
		{
			NavigationManager.NavigateTo("quiz/" + Title + "/" + Premade);
		}
	}
}
