@page "/account"
@using Microsoft.JSInterop
@using System
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IJSRuntime IJSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IFirebaseAuthService FirebaseAuthService

<div class="container">
	<div class="card text-light bg-dark mb-5">
		<div class="card-header">
			<h4>Note learning progress for @DateTime.Now.ToString("yyyy")</h4>
		</div>
		<div class="card-body">
			<div class="container">
				<Chart @ref="barChart" Type="ChartType.Bar" TItem="int" Clicked="@OnClicked" />
			</div>
		</div>
	</div>
	<div class="card text-light bg-dark">
		<div class="card-header">
			@if (FirebaseAuthService.FirebaseAuthClient.User.Info.DisplayName != null)
			{
				<h4>Account settings for @FirebaseAuthService.FirebaseAuthClient.User.Info.DisplayName</h4>
			}
			else
			{
				<h4>Account settings</h4>
			}
		</div>
		<div class="card-body">
			@if (FirebaseAuthService.FirebaseAuthClient.User != null)
			{
				<div class="my-3">
					<p>Email: @FirebaseAuthService.FirebaseAuthClient.User.Info.Email</p>
					<label>New password</label>
					<br />
					<input class="@errorInput" type="password" @bind="UserPass1" />
					<br />
					<label>Repeat password</label>
					<br />
					<input class="@errorInput" type="password" @bind="UserPass2" />
					<br />
					<small class="text-danger">@ErrorText</small>
					<small class="text-success">@ChangedText</small>
					<br />
					<button class="btn btn-light my-3" @onclick="ChangePass">Change password</button>

				</div>

				<button class="btn btn-danger" @onclick="DeleteAccount">Delete Account</button>
				<small class="text-danger">@DeleteAccountError</small>
			}
		</div>
	</div>
</div>


@code {

	/*
	* Monthly Chart Code
	*/

	Chart<int> barChart;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender && FirebaseAuthService.FirebaseAuthClient.User != null)
		{
			await HandleRedraw();
		}
	}

	async Task HandleRedraw()
	{
		await barChart.Clear();

		await barChart.AddLabelsDatasetsAndUpdate(Labels, GetBarChartDataset());
	}

	private BarChartDataset<int> GetBarChartDataset()
	{
		return new()
			{
				Label = "Note learning progress this year",
				Data = RandomizeData(),
				BackgroundColor = backgroundColors,
				BorderColor = borderColors,
				BorderWidth = 1
			};
	}

	string[] Labels = { "January", "Febuary", "March", "April", "May", "June", "July", "August", "Spetember", "October", "November", "December" };
	List<string> backgroundColors = new List<string> { ChartColor.FromRgba(75, 192, 192, 0.2f) };
	List<string> borderColors = new List<string> { ChartColor.FromRgba(75, 192, 192, 1f) };

	List<int> RandomizeData()
	{
		// Temporary hard coded data
		return new List<int> {
			5, 10, 12, 24, 15, 1, 8 , 2, 3, 40, 36, 32
		};
	}

	Task OnClicked(ChartMouseEventArgs e)
	{
		var model = e.Model as BarChartModel;

		Console.WriteLine($"Handling event for {nameof(BarChartModel)}: x:{model.X} y:{model.Y}");
		return Task.CompletedTask;
	}

	/*
	 * End of chart code
	 */


	protected String UserPass1 { get; set; } = String.Empty;
	protected String UserPass2 { get; set; } = String.Empty;
	String errorInput { get; set; } = "rounded";
	String ErrorText { get; set; }
	String ChangedText { get; set; }
	String DeleteAccountError { get; set; }

	protected override Task OnInitializedAsync()
	{
		if (FirebaseAuthService.FirebaseAuthClient.User == null)
		{
			NavigationManager.NavigateTo("/log-in");
		}
		return base.OnInitializedAsync();
	}

	public async Task ChangePass()
	{
		if (FirebaseAuthService.FirebaseAuthClient.User != null)
		{
			if (UserPass1 == String.Empty || UserPass2 == String.Empty)
			{
				errorInput = "border border-danger rounded";
			}
			else if (UserPass1 != UserPass2)
			{
				errorInput = "rounded";
				ErrorText = "Passwords do not match";
			}
			else if (UserPass1.Count() < 6)
			{
				ErrorText = "Passwords must have at least 6 characters";
			}
			else
			{
				try
				{
					await FirebaseAuthService.FirebaseAuthClient.User.ChangePasswordAsync(UserPass1);
					errorInput = "border border-success rounded";
					ErrorText = "";
					ChangedText = "Password changed!";
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}
			}
		}
	}

	public async Task DeleteAccount()
	{
		if (FirebaseAuthService.FirebaseAuthClient.User != null)
		{
			bool result = await IJSRuntime.InvokeAsync<bool>
	("confirm", "Delete account? This action cannot be undone.");
	if (result)
	{
	try
	{
	await FirebaseAuthService.FirebaseAuthClient.User.DeleteAsync();
	NavigationManager.NavigateTo("/");
	}
	catch (Exception e)
	{
	DeleteAccountError = "Session expired. Please try to log in again.";
	Console.WriteLine(e.Message);
	}

	// TODO: Delete all user's notes
	}
	}
	}
	}
